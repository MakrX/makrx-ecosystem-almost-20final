name: Deploy Gateway Frontend

on:
  push:
    branches: [main]
    paths: ['frontend/gateway-frontend/**']
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: makrx-gateway

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/gateway-frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend/gateway-frontend
        npm ci
    
    - name: Run type check
      run: |
        cd frontend/gateway-frontend
        npm run typecheck
    
    - name: Run linting
      run: |
        cd frontend/gateway-frontend
        npm run lint
      continue-on-error: true
    
    - name: Run tests
      run: |
        cd frontend/gateway-frontend
        npm run test
      continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/gateway-frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend/gateway-frontend
        npm ci
    
    - name: Build application
      run: |
        cd frontend/gateway-frontend
        npm run build
      env:
        VITE_APP_VERSION: ${{ github.sha }}
        VITE_NODE_ENV: production
        # Add your production environment variables here
        # VITE_KEYCLOAK_URL: ${{ secrets.VITE_KEYCLOAK_URL }}
        # VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gateway-build
        path: frontend/gateway-frontend/dist
        retention-days: 1

    # Docker build and push
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: frontend/gateway-frontend
        file: frontend/gateway-frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: gateway-build
        path: dist

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Examples:
        # - Deploy to staging S3 bucket
        # - Update staging Kubernetes deployment
        # - Deploy to staging server via SSH

    - name: Run smoke tests
      run: |
        sleep 30  # Wait for deployment to be ready
        curl -f ${{ vars.STAGING_URL }}/health
        echo "Staging deployment successful!"

  deploy-production:
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: gateway-build
        path: dist

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Examples:
        # aws s3 sync dist/ s3://${{ secrets.S3_BUCKET }}/ --delete
        # aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        
        # Or for Kubernetes:
        # kubectl set image deployment/makrx-gateway makrx-gateway=${{ needs.build.outputs.image-tag }}
        
        # Or for server deployment:
        # scp -r dist/ user@server:/var/www/makrx-gateway/
        # ssh user@server "sudo systemctl reload nginx"

    - name: Run production smoke tests
      run: |
        sleep 60  # Wait for deployment to be ready
        curl -f ${{ vars.PRODUCTION_URL }}/health
        echo "Production deployment successful!"

    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Gateway Frontend deployed successfully to production!"
        # Add notification to Slack, Teams, etc.
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Gateway Frontend deployment failed!"
        # Add failure notification
