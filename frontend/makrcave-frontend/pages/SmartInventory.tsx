import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/card';
import { Button } from '../components/ui/button';
import { Badge } from '../components/ui/badge';
import { Input } from '../components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';
import { Progress } from '../components/ui/progress';
import { 
  Package,
  TrendingUp,
  TrendingDown,
  AlertTriangle,
  CheckCircle2,
  ShoppingCart,
  Calendar,
  DollarSign,
  BarChart3,
  LineChart,
  Target,
  Zap,
  RefreshCw,
  Bell,
  Settings,
  Download,
  Upload,
  Search,
  Filter,
  Plus,
  Edit,
  Eye,
  MoreHorizontal,
  Clock,
  Activity,
  Truck,
  CreditCard,
  User,
  Building2,
  Boxes,
  Archive,
  Star,
  ThumbsUp,
  ThumbsDown,
  MessageSquare,
  Share2,
  FileText,
  ArrowUp,
  ArrowDown,
  Minus,
  PieChart
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

interface InventoryItem {
  id: string;
  name: string;
  category: string;
  subcategory: string;
  sku: string;
  description: string;
  currentStock: number;
  minThreshold: number;
  maxThreshold: number;
  reorderPoint: number;
  reorderQuantity: number;
  unitCost: number;
  supplier: string;
  leadTime: number; // in days
  location: string;
  lastRestocked: string;
  averageUsage: number; // per month
  forecastDemand: number;
  seasonalFactor: number;
  stockStatus: 'in_stock' | 'low_stock' | 'out_of_stock' | 'overstock';
  autoReorder: boolean;
  criticalLevel: 'low' | 'medium' | 'high';
}

interface ForecastData {
  itemId: string;
  predictions: Array<{
    period: string;
    predictedDemand: number;
    confidence: number;
    factors: string[];
  }>;
  accuracy: number;
  trendDirection: 'increasing' | 'decreasing' | 'stable';
  seasonality: boolean;
}

interface PurchaseOrder {
  id: string;
  orderNumber: string;
  supplier: string;
  status: 'draft' | 'pending' | 'approved' | 'ordered' | 'shipped' | 'received' | 'cancelled';
  orderDate: string;
  expectedDelivery: string;
  totalAmount: number;
  items: Array<{
    itemId: string;
    itemName: string;
    quantity: number;
    unitCost: number;
    totalCost: number;
  }>;
  autoGenerated: boolean;
  notes?: string;
}

interface Supplier {
  id: string;
  name: string;
  contact: string;
  email: string;
  phone: string;
  rating: number;
  reliability: number;
  averageLeadTime: number;
  categories: string[];
  paymentTerms: string;
  minimumOrder: number;
  preferredSupplier: boolean;
}

const SmartInventory: React.FC = () => {
  const { user } = useAuth();
  const [selectedTab, setSelectedTab] = useState('dashboard');
  const [inventory, setInventory] = useState<InventoryItem[]>([]);
  const [forecasts, setForecasts] = useState<ForecastData[]>([]);
  const [purchaseOrders, setPurchaseOrders] = useState<PurchaseOrder[]>([]);
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [filterCategory, setFilterCategory] = useState('all');
  const [filterStatus, setFilterStatus] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    loadInventoryData();
  }, []);

  const loadInventoryData = () => {
    // Mock inventory data
    const mockInventory: InventoryItem[] = [
      {
        id: 'inv-001',
        name: 'PLA Filament 1.75mm',
        category: '3D Printing',
        subcategory: 'Filaments',
        sku: 'PLA-175-WHT-001',
        description: 'High-quality PLA filament in white color',
        currentStock: 15,
        minThreshold: 10,
        maxThreshold: 50,
        reorderPoint: 12,
        reorderQuantity: 25,
        unitCost: 25,
        supplier: 'Polymaker',
        leadTime: 7,
        location: 'Shelf A-1',
        lastRestocked: '2024-11-20',
        averageUsage: 8,
        forecastDemand: 12,
        seasonalFactor: 1.2,
        stockStatus: 'low_stock',
        autoReorder: true,
        criticalLevel: 'high'
      },
      {
        id: 'inv-002',
        name: 'CNC End Mill 6mm',
        category: 'CNC Tools',
        subcategory: 'End Mills',
        sku: 'EM-6MM-2FL-001',
        description: '2-flute carbide end mill for aluminum',
        currentStock: 8,
        minThreshold: 5,
        maxThreshold: 20,
        reorderPoint: 6,
        reorderQuantity: 12,
        unitCost: 45,
        supplier: 'Harvey Tool',
        leadTime: 5,
        location: 'Tool Cabinet B-3',
        lastRestocked: '2024-12-10',
        averageUsage: 3,
        forecastDemand: 4,
        seasonalFactor: 1.0,
        stockStatus: 'in_stock',
        autoReorder: true,
        criticalLevel: 'medium'
      },
      {
        id: 'inv-003',
        name: 'Acrylic Sheet 3mm Clear',
        category: 'Materials',
        subcategory: 'Acrylic',
        sku: 'ACR-3MM-CLR-001',
        description: 'Cast acrylic sheet 600x400mm clear',
        currentStock: 25,
        minThreshold: 8,
        maxThreshold: 40,
        reorderPoint: 10,
        reorderQuantity: 20,
        unitCost: 18,
        supplier: 'Evonik',
        leadTime: 10,
        location: 'Material Rack C-2',
        lastRestocked: '2024-12-05',
        averageUsage: 6,
        forecastDemand: 5,
        seasonalFactor: 0.9,
        stockStatus: 'in_stock',
        autoReorder: false,
        criticalLevel: 'low'
      },
      {
        id: 'inv-004',
        name: 'M5 x 20mm Socket Head Screws',
        category: 'Hardware',
        subcategory: 'Fasteners',
        sku: 'SCR-M5-20-SHC-001',
        description: 'Stainless steel socket head cap screws',
        currentStock: 150,
        minThreshold: 100,
        maxThreshold: 500,
        reorderPoint: 120,
        reorderQuantity: 200,
        unitCost: 0.5,
        supplier: 'McMaster-Carr',
        leadTime: 3,
        location: 'Hardware Drawer D-1',
        lastRestocked: '2024-11-30',
        averageUsage: 45,
        forecastDemand: 50,
        seasonalFactor: 1.1,
        stockStatus: 'in_stock',
        autoReorder: true,
        criticalLevel: 'medium'
      }
    ];

    // Mock forecast data
    const mockForecasts: ForecastData[] = [
      {
        itemId: 'inv-001',
        predictions: [
          { period: 'Jan 2025', predictedDemand: 12, confidence: 85, factors: ['Seasonal increase', 'New projects'] },
          { period: 'Feb 2025', predictedDemand: 10, confidence: 82, factors: ['Normal usage'] },
          { period: 'Mar 2025', predictedDemand: 14, confidence: 78, factors: ['Spring projects boost'] }
        ],
        accuracy: 87,
        trendDirection: 'increasing',
        seasonality: true
      },
      {
        itemId: 'inv-002',
        predictions: [
          { period: 'Jan 2025', predictedDemand: 4, confidence: 90, factors: ['Steady usage'] },
          { period: 'Feb 2025', predictedDemand: 3, confidence: 88, factors: ['Maintenance period'] },
          { period: 'Mar 2025', predictedDemand: 5, confidence: 85, factors: ['Increased production'] }
        ],
        accuracy: 92,
        trendDirection: 'stable',
        seasonality: false
      }
    ];

    // Mock purchase orders
    const mockPurchaseOrders: PurchaseOrder[] = [
      {
        id: 'po-001',
        orderNumber: 'PO-2024-001',
        supplier: 'Polymaker',
        status: 'pending',
        orderDate: '2024-12-18',
        expectedDelivery: '2024-12-25',
        totalAmount: 625,
        autoGenerated: true,
        items: [
          { itemId: 'inv-001', itemName: 'PLA Filament 1.75mm', quantity: 25, unitCost: 25, totalCost: 625 }
        ]
      },
      {
        id: 'po-002',
        orderNumber: 'PO-2024-002',
        supplier: 'Harvey Tool',
        status: 'approved',
        orderDate: '2024-12-17',
        expectedDelivery: '2024-12-22',
        totalAmount: 540,
        autoGenerated: false,
        items: [
          { itemId: 'inv-002', itemName: 'CNC End Mill 6mm', quantity: 12, unitCost: 45, totalCost: 540 }
        ]
      }
    ];

    // Mock suppliers
    const mockSuppliers: Supplier[] = [
      {
        id: 'sup-001',
        name: 'Polymaker',
        contact: 'John Smith',
        email: 'orders@polymaker.com',
        phone: '+1-555-0101',
        rating: 4.8,
        reliability: 95,
        averageLeadTime: 7,
        categories: ['3D Printing', 'Filaments'],
        paymentTerms: 'Net 30',
        minimumOrder: 500,
        preferredSupplier: true
      },
      {
        id: 'sup-002',
        name: 'Harvey Tool',
        contact: 'Sarah Johnson',
        email: 'sales@harveytool.com',
        phone: '+1-555-0102',
        rating: 4.6,
        reliability: 92,
        averageLeadTime: 5,
        categories: ['CNC Tools', 'End Mills'],
        paymentTerms: 'Net 15',
        minimumOrder: 200,
        preferredSupplier: true
      },
      {
        id: 'sup-003',
        name: 'McMaster-Carr',
        contact: 'Mike Wilson',
        email: 'orders@mcmaster.com',
        phone: '+1-555-0103',
        rating: 4.9,
        reliability: 98,
        averageLeadTime: 3,
        categories: ['Hardware', 'Fasteners', 'Tools'],
        paymentTerms: 'Net 30',
        minimumOrder: 50,
        preferredSupplier: true
      }
    ];

    setInventory(mockInventory);
    setForecasts(mockForecasts);
    setPurchaseOrders(mockPurchaseOrders);
    setSuppliers(mockSuppliers);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'in_stock': return 'bg-green-100 text-green-800 border-green-200';
      case 'low_stock': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'out_of_stock': return 'bg-red-100 text-red-800 border-red-200';
      case 'overstock': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'approved': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'ordered': return 'bg-purple-100 text-purple-800 border-purple-200';
      case 'shipped': return 'bg-indigo-100 text-indigo-800 border-indigo-200';
      case 'received': return 'bg-green-100 text-green-800 border-green-200';
      case 'cancelled': return 'bg-gray-100 text-gray-800 border-gray-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getCriticalityColor = (level: string) => {
    switch (level) {
      case 'low': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'high': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getTrendIcon = (direction: string) => {
    switch (direction) {
      case 'increasing': return <TrendingUp className="h-4 w-4 text-green-500" />;
      case 'decreasing': return <TrendingDown className="h-4 w-4 text-red-500" />;
      case 'stable': return <Minus className="h-4 w-4 text-blue-500" />;
      default: return <Activity className="h-4 w-4 text-gray-500" />;
    }
  };

  const filteredInventory = inventory.filter(item => {
    const matchesCategory = filterCategory === 'all' || item.category === filterCategory;
    const matchesStatus = filterStatus === 'all' || item.stockStatus === filterStatus;
    const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         item.sku.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesCategory && matchesStatus && matchesSearch;
  });

  const inventoryStats = {
    totalItems: inventory.length,
    lowStockItems: inventory.filter(item => item.stockStatus === 'low_stock').length,
    outOfStockItems: inventory.filter(item => item.stockStatus === 'out_of_stock').length,
    autoReorderItems: inventory.filter(item => item.autoReorder).length,
    totalValue: inventory.reduce((sum, item) => sum + (item.currentStock * item.unitCost), 0),
    avgForecastAccuracy: Math.round(forecasts.reduce((sum, f) => sum + f.accuracy, 0) / forecasts.length),
    pendingOrders: purchaseOrders.filter(po => po.status === 'pending').length,
    monthlyBurn: inventory.reduce((sum, item) => sum + (item.averageUsage * item.unitCost), 0)
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Smart Inventory</h1>
          <p className="text-gray-600">AI-powered forecasting and automated inventory management</p>
        </div>
        <div className="flex items-center space-x-3">
          <Button variant="outline">
            <Download className="h-4 w-4 mr-2" />
            Export Data
          </Button>
          <Button variant="outline">
            <RefreshCw className="h-4 w-4 mr-2" />
            Sync Forecast
          </Button>
          <Button>
            <Plus className="h-4 w-4 mr-2" />
            Add Item
          </Button>
        </div>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                <Package className="h-6 w-6 text-blue-600" />
              </div>
              <div>
                <p className="text-2xl font-bold">{inventoryStats.totalItems}</p>
                <p className="text-sm text-gray-600">Total Items</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
                <AlertTriangle className="h-6 w-6 text-yellow-600" />
              </div>
              <div>
                <p className="text-2xl font-bold">{inventoryStats.lowStockItems}</p>
                <p className="text-sm text-gray-600">Low Stock</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                <Target className="h-6 w-6 text-green-600" />
              </div>
              <div>
                <p className="text-2xl font-bold">{inventoryStats.avgForecastAccuracy}%</p>
                <p className="text-sm text-gray-600">Forecast Accuracy</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                <DollarSign className="h-6 w-6 text-purple-600" />
              </div>
              <div>
                <p className="text-2xl font-bold">${inventoryStats.totalValue.toLocaleString()}</p>
                <p className="text-sm text-gray-600">Inventory Value</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Main Content Tabs */}
      <Tabs value={selectedTab} onValueChange={setSelectedTab}>
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
          <TabsTrigger value="inventory">Inventory</TabsTrigger>
          <TabsTrigger value="forecasting">Forecasting</TabsTrigger>
          <TabsTrigger value="orders">Purchase Orders</TabsTrigger>
          <TabsTrigger value="suppliers">Suppliers</TabsTrigger>
        </TabsList>

        {/* Dashboard Tab */}
        <TabsContent value="dashboard" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Stock Level Alerts */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Bell className="h-5 w-5" />
                  <span>Stock Level Alerts</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {inventory.filter(item => item.stockStatus !== 'in_stock').map((item) => (
                    <div key={item.id} className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="flex items-center space-x-3">
                        {item.stockStatus === 'out_of_stock' && <AlertTriangle className="h-5 w-5 text-red-500" />}
                        {item.stockStatus === 'low_stock' && <AlertTriangle className="h-5 w-5 text-yellow-500" />}
                        {item.stockStatus === 'overstock' && <Package className="h-5 w-5 text-blue-500" />}
                        <div>
                          <div className="font-medium text-sm">{item.name}</div>
                          <div className="text-xs text-gray-500">Current: {item.currentStock} | Min: {item.minThreshold}</div>
                        </div>
                      </div>
                      <div className="text-right">
                        <Badge className={getStatusColor(item.stockStatus)}>
                          {item.stockStatus.replace('_', ' ')}
                        </Badge>
                        {item.autoReorder && (
                          <div className="text-xs text-green-600 mt-1">Auto-reorder enabled</div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Forecast Summary */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <LineChart className="h-5 w-5" />
                  <span>Demand Forecast Summary</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {forecasts.map((forecast) => {
                    const item = inventory.find(i => i.id === forecast.itemId);
                    if (!item) return null;
                    
                    return (
                      <div key={forecast.itemId} className="border rounded-lg p-3">
                        <div className="flex items-center justify-between mb-2">
                          <div className="font-medium text-sm">{item.name}</div>
                          <div className="flex items-center space-x-2">
                            {getTrendIcon(forecast.trendDirection)}
                            <span className="text-sm">{forecast.accuracy}% accuracy</span>
                          </div>
                        </div>
                        
                        <div className="space-y-2">
                          {forecast.predictions.slice(0, 2).map((pred, index) => (
                            <div key={index} className="flex justify-between text-xs">
                              <span>{pred.period}</span>
                              <span className="font-medium">{pred.predictedDemand} units ({pred.confidence}%)</span>
                            </div>
                          ))}
                        </div>
                        
                        {forecast.seasonality && (
                          <Badge variant="outline" className="mt-2 text-xs">
                            Seasonal Pattern
                          </Badge>
                        )}
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Recent Orders & Quick Actions */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <ShoppingCart className="h-5 w-5" />
                  <span>Recent Purchase Orders</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {purchaseOrders.slice(0, 5).map((order) => (
                    <div key={order.id} className="flex items-center justify-between p-3 border rounded-lg">
                      <div>
                        <div className="font-medium text-sm">{order.orderNumber}</div>
                        <div className="text-xs text-gray-500">{order.supplier}</div>
                        <div className="text-xs text-gray-500">Expected: {order.expectedDelivery}</div>
                      </div>
                      <div className="text-right">
                        <Badge className={getStatusColor(order.status)}>
                          {order.status}
                        </Badge>
                        <div className="text-sm font-medium mt-1">${order.totalAmount}</div>
                        {order.autoGenerated && (
                          <div className="text-xs text-blue-600">Auto-generated</div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <BarChart3 className="h-5 w-5" />
                  <span>Inventory Analytics</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="text-center p-3 bg-blue-50 rounded-lg">
                      <div className="text-lg font-bold text-blue-600">${inventoryStats.monthlyBurn.toLocaleString()}</div>
                      <div className="text-sm text-gray-600">Monthly Burn Rate</div>
                    </div>
                    <div className="text-center p-3 bg-green-50 rounded-lg">
                      <div className="text-lg font-bold text-green-600">{inventoryStats.autoReorderItems}</div>
                      <div className="text-sm text-gray-600">Auto-Reorder Items</div>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Inventory Turnover</span>
                      <span className="font-medium">6.2x/year</span>
                    </div>
                    <Progress value={62} className="h-2" />
                    
                    <div className="flex justify-between text-sm">
                      <span>Stockout Risk</span>
                      <span className="font-medium">12%</span>
                    </div>
                    <Progress value={12} className="h-2" />
                    
                    <div className="flex justify-between text-sm">
                      <span>Forecast Reliability</span>
                      <span className="font-medium">{inventoryStats.avgForecastAccuracy}%</span>
                    </div>
                    <Progress value={inventoryStats.avgForecastAccuracy} className="h-2" />
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Inventory Tab */}
        <TabsContent value="inventory" className="space-y-6">
          {/* Filters */}
          <div className="flex flex-col lg:flex-row gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Search items by name or SKU..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            <div className="flex gap-3">
              <Select value={filterCategory} onValueChange={setFilterCategory}>
                <SelectTrigger className="w-40">
                  <SelectValue placeholder="Category" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Categories</SelectItem>
                  <SelectItem value="3D Printing">3D Printing</SelectItem>
                  <SelectItem value="CNC Tools">CNC Tools</SelectItem>
                  <SelectItem value="Materials">Materials</SelectItem>
                  <SelectItem value="Hardware">Hardware</SelectItem>
                </SelectContent>
              </Select>
              
              <Select value={filterStatus} onValueChange={setFilterStatus}>
                <SelectTrigger className="w-40">
                  <SelectValue placeholder="Status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Status</SelectItem>
                  <SelectItem value="in_stock">In Stock</SelectItem>
                  <SelectItem value="low_stock">Low Stock</SelectItem>
                  <SelectItem value="out_of_stock">Out of Stock</SelectItem>
                  <SelectItem value="overstock">Overstock</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Inventory Grid */}
          <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
            {filteredInventory.map((item) => (
              <Card key={item.id} className="overflow-hidden">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div>
                      <CardTitle className="text-lg">{item.name}</CardTitle>
                      <p className="text-sm text-gray-600">{item.sku}</p>
                      <p className="text-xs text-gray-500">{item.category} • {item.subcategory}</p>
                    </div>
                    <Badge className={getStatusColor(item.stockStatus)}>
                      {item.stockStatus.replace('_', ' ')}
                    </Badge>
                  </div>
                </CardHeader>
                
                <CardContent className="space-y-4">
                  {/* Stock Level Visual */}
                  <div>
                    <div className="flex justify-between text-sm mb-2">
                      <span>Stock Level</span>
                      <span className="font-medium">{item.currentStock} units</span>
                    </div>
                    <div className="relative">
                      <Progress 
                        value={Math.min(100, (item.currentStock / item.maxThreshold) * 100)} 
                        className="h-3"
                      />
                      <div 
                        className="absolute top-0 h-3 w-0.5 bg-red-500"
                        style={{ left: `${(item.minThreshold / item.maxThreshold) * 100}%` }}
                      />
                      <div 
                        className="absolute top-0 h-3 w-0.5 bg-yellow-500"
                        style={{ left: `${(item.reorderPoint / item.maxThreshold) * 100}%` }}
                      />
                    </div>
                    <div className="flex justify-between text-xs text-gray-500 mt-1">
                      <span>Min: {item.minThreshold}</span>
                      <span>Reorder: {item.reorderPoint}</span>
                      <span>Max: {item.maxThreshold}</span>
                    </div>
                  </div>
                  
                  {/* Key Metrics */}
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-500">Monthly Usage:</span>
                      <div className="font-medium">{item.averageUsage} units</div>
                    </div>
                    <div>
                      <span className="text-gray-500">Unit Cost:</span>
                      <div className="font-medium">${item.unitCost}</div>
                    </div>
                    <div>
                      <span className="text-gray-500">Lead Time:</span>
                      <div className="font-medium">{item.leadTime} days</div>
                    </div>
                    <div>
                      <span className="text-gray-500">Forecasted:</span>
                      <div className="font-medium">{item.forecastDemand} units</div>
                    </div>
                  </div>
                  
                  {/* Supplier & Location */}
                  <div className="text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-500">Supplier:</span>
                      <span className="font-medium">{item.supplier}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-500">Location:</span>
                      <span className="font-medium">{item.location}</span>
                    </div>
                  </div>
                  
                  {/* Auto-reorder Status */}
                  {item.autoReorder && (
                    <div className="flex items-center space-x-2 text-sm text-green-600">
                      <Zap className="h-4 w-4" />
                      <span>Auto-reorder enabled</span>
                    </div>
                  )}
                  
                  {/* Action Buttons */}
                  <div className="flex space-x-2">
                    <Button size="sm" className="flex-1">
                      <ShoppingCart className="h-3 w-3 mr-2" />
                      Reorder
                    </Button>
                    <Button size="sm" variant="outline">
                      <Edit className="h-3 w-3" />
                    </Button>
                    <Button size="sm" variant="outline">
                      <Eye className="h-3 w-3" />
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Forecasting Tab */}
        <TabsContent value="forecasting" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {forecasts.map((forecast) => {
              const item = inventory.find(i => i.id === forecast.itemId);
              if (!item) return null;
              
              return (
                <Card key={forecast.itemId}>
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div>
                        <CardTitle className="text-lg">{item.name}</CardTitle>
                        <p className="text-sm text-gray-600">{item.sku}</p>
                      </div>
                      <div className="text-right">
                        <div className="flex items-center space-x-1">
                          {getTrendIcon(forecast.trendDirection)}
                          <span className="text-sm font-medium capitalize">{forecast.trendDirection}</span>
                        </div>
                        <div className="text-xs text-gray-500">{forecast.accuracy}% accuracy</div>
                      </div>
                    </div>
                  </CardHeader>
                  
                  <CardContent className="space-y-4">
                    {/* Forecast Chart Placeholder */}
                    <div className="h-32 bg-gray-50 rounded-lg flex items-center justify-center">
                      <div className="text-center text-gray-500">
                        <LineChart className="h-8 w-8 mx-auto mb-2" />
                        <p className="text-sm">Demand Forecast Chart</p>
                      </div>
                    </div>
                    
                    {/* Predictions */}
                    <div className="space-y-3">
                      <h4 className="font-medium">Upcoming Predictions:</h4>
                      {forecast.predictions.map((pred, index) => (
                        <div key={index} className="border rounded-lg p-3">
                          <div className="flex justify-between items-start mb-2">
                            <div>
                              <div className="font-medium">{pred.period}</div>
                              <div className="text-sm text-gray-600">{pred.predictedDemand} units expected</div>
                            </div>
                            <Badge variant="outline">
                              {pred.confidence}% confidence
                            </Badge>
                          </div>
                          
                          <div className="text-xs text-gray-500">
                            <span>Factors: </span>
                            {pred.factors.join(', ')}
                          </div>
                        </div>
                      ))}
                    </div>
                    
                    {/* Forecast Settings */}
                    <div className="flex space-x-2">
                      <Button size="sm" variant="outline" className="flex-1">
                        <Settings className="h-3 w-3 mr-2" />
                        Adjust Model
                      </Button>
                      <Button size="sm" variant="outline">
                        <Download className="h-3 w-3" />
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </TabsContent>

        {/* Purchase Orders Tab */}
        <TabsContent value="orders" className="space-y-6">
          <div className="space-y-4">
            {purchaseOrders.map((order) => (
              <Card key={order.id}>
                <CardContent className="p-6">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-3">
                        <h3 className="font-semibold text-lg">{order.orderNumber}</h3>
                        <Badge className={getStatusColor(order.status)}>
                          {order.status}
                        </Badge>
                        {order.autoGenerated && (
                          <Badge variant="outline">
                            <Zap className="h-3 w-3 mr-1" />
                            Auto-generated
                          </Badge>
                        )}
                      </div>
                      
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mb-4">
                        <div>
                          <span className="text-gray-500">Supplier:</span>
                          <div className="font-medium">{order.supplier}</div>
                        </div>
                        <div>
                          <span className="text-gray-500">Order Date:</span>
                          <div className="font-medium">{order.orderDate}</div>
                        </div>
                        <div>
                          <span className="text-gray-500">Expected Delivery:</span>
                          <div className="font-medium">{order.expectedDelivery}</div>
                        </div>
                        <div>
                          <span className="text-gray-500">Total Amount:</span>
                          <div className="font-medium">${order.totalAmount.toLocaleString()}</div>
                        </div>
                      </div>
                      
                      <div className="space-y-2">
                        <h5 className="font-medium">Order Items:</h5>
                        {order.items.map((item, index) => (
                          <div key={index} className="flex justify-between text-sm p-2 bg-gray-50 rounded">
                            <span>{item.itemName}</span>
                            <span>{item.quantity} × ${item.unitCost} = ${item.totalCost}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                    
                    <div className="flex space-x-2">
                      <Button size="sm" variant="outline">
                        <Eye className="h-4 w-4" />
                      </Button>
                      <Button size="sm" variant="outline">
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Button size="sm" variant="outline">
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Suppliers Tab */}
        <TabsContent value="suppliers" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
            {suppliers.map((supplier) => (
              <Card key={supplier.id}>
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div>
                      <CardTitle className="text-lg">{supplier.name}</CardTitle>
                      <p className="text-sm text-gray-600">{supplier.contact}</p>
                    </div>
                    {supplier.preferredSupplier && (
                      <Badge className="bg-yellow-100 text-yellow-800">
                        <Star className="h-3 w-3 mr-1" />
                        Preferred
                      </Badge>
                    )}
                  </div>
                </CardHeader>
                
                <CardContent className="space-y-4">
                  {/* Supplier Metrics */}
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-500">Rating:</span>
                      <div className="flex items-center">
                        <Star className="h-4 w-4 text-yellow-500 mr-1" />
                        <span className="font-medium">{supplier.rating}/5</span>
                      </div>
                    </div>
                    <div>
                      <span className="text-gray-500">Reliability:</span>
                      <div className="font-medium">{supplier.reliability}%</div>
                    </div>
                    <div>
                      <span className="text-gray-500">Lead Time:</span>
                      <div className="font-medium">{supplier.averageLeadTime} days</div>
                    </div>
                    <div>
                      <span className="text-gray-500">Min Order:</span>
                      <div className="font-medium">${supplier.minimumOrder}</div>
                    </div>
                  </div>
                  
                  {/* Contact Info */}
                  <div className="text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-500">Email:</span>
                      <span className="font-medium">{supplier.email}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-500">Phone:</span>
                      <span className="font-medium">{supplier.phone}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-500">Terms:</span>
                      <span className="font-medium">{supplier.paymentTerms}</span>
                    </div>
                  </div>
                  
                  {/* Categories */}
                  <div>
                    <h5 className="font-medium text-sm mb-2">Categories:</h5>
                    <div className="flex flex-wrap gap-1">
                      {supplier.categories.map((category, index) => (
                        <Badge key={index} variant="outline" className="text-xs">
                          {category}
                        </Badge>
                      ))}
                    </div>
                  </div>
                  
                  {/* Action Buttons */}
                  <div className="flex space-x-2">
                    <Button size="sm" className="flex-1">
                      <MessageSquare className="h-3 w-3 mr-2" />
                      Contact
                    </Button>
                    <Button size="sm" variant="outline">
                      <Eye className="h-3 w-3" />
                    </Button>
                    <Button size="sm" variant="outline">
                      <Edit className="h-3 w-3" />
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default SmartInventory;
