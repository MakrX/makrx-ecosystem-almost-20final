// ========================================\n// USER REGISTRATION PAGE\n// ========================================\n// New user registration interface for MakrCave\n// Features:\n// - User registration form with validation\n// - Password strength checking\n// - Automatic role assignment (maker by default)\n// - Error handling and loading states\n// - Responsive design matching login page\n\nimport { useState } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { Building2, Eye, EyeOff, Lock, Mail, User, AlertCircle, CheckCircle } from 'lucide-react';\nimport MakrXThemeToggle from '../components/MakrXThemeToggle';\nimport authService, { RegisterData } from '../services/authService';\n\nexport default function Register() {\n  // ========================================\n  // STATE MANAGEMENT\n  // ========================================\n  const [formData, setFormData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    confirmPassword: '',\n    firstName: '',\n    lastName: ''\n  });\n  const [showPassword, setShowPassword] = useState(false);     // Toggle password visibility\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false); // Toggle confirm password visibility\n  const [isLoading, setIsLoading] = useState(false);           // Loading state during registration\n  const [error, setError] = useState('');                     // Error message display\n  const [passwordStrength, setPasswordStrength] = useState(0); // Password strength score (0-4)\n  \n  const navigate = useNavigate();\n\n  // ========================================\n  // PASSWORD VALIDATION\n  // ========================================\n  // Calculates password strength based on various criteria\n  // CUSTOMIZATION: Modify these rules to change password requirements\n  const calculatePasswordStrength = (password: string): number => {\n    let strength = 0;\n    \n    // Length check (minimum 8 characters)\n    if (password.length >= 8) strength++;\n    \n    // Contains lowercase letter\n    if (/[a-z]/.test(password)) strength++;\n    \n    // Contains uppercase letter\n    if (/[A-Z]/.test(password)) strength++;\n    \n    // Contains number\n    if (/\\d/.test(password)) strength++;\n    \n    // Contains special character\n    if (/[!@#$%^&*(),.?\":{}|<>]/.test(password)) strength++;\n    \n    return strength;\n  };\n\n  // ========================================\n  // FORM VALIDATION\n  // ========================================\n  const validateForm = (): string | null => {\n    // Email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(formData.email)) {\n      return 'Please enter a valid email address';\n    }\n\n    // Username validation (3-20 characters, alphanumeric and underscore)\n    if (formData.username.length < 3 || formData.username.length > 20) {\n      return 'Username must be between 3 and 20 characters';\n    }\n    if (!/^[a-zA-Z0-9_]+$/.test(formData.username)) {\n      return 'Username can only contain letters, numbers, and underscores';\n    }\n\n    // Password strength validation\n    if (passwordStrength < 3) {\n      return 'Password is too weak. Please use a stronger password';\n    }\n\n    // Confirm password validation\n    if (formData.password !== formData.confirmPassword) {\n      return 'Passwords do not match';\n    }\n\n    return null;\n  };\n\n  // ========================================\n  // INPUT HANDLERS\n  // ========================================\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    \n    // Update password strength in real-time\n    if (field === 'password') {\n      setPasswordStrength(calculatePasswordStrength(value));\n    }\n    \n    // Clear error when user starts typing\n    if (error) setError('');\n  };\n\n  // ========================================\n  // REGISTRATION HANDLER\n  // ========================================\n  // Processes the registration form submission\n  // New users are assigned 'maker' role by default\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate form data\n    const validationError = validateForm();\n    if (validationError) {\n      setError(validationError);\n      return;\n    }\n\n    setIsLoading(true);\n    setError('');\n\n    try {\n      // Prepare registration data\n      const registerData: RegisterData = {\n        email: formData.email,\n        username: formData.username,\n        password: formData.password,\n        firstName: formData.firstName || undefined,\n        lastName: formData.lastName || undefined\n      };\n\n      // Register user (automatically logs them in)\n      await authService.register(registerData);\n      \n      // Redirect to dashboard on successful registration\n      navigate('/portal/dashboard');\n    } catch (error) {\n      // Display registration error to user\n      setError(error instanceof Error ? error.message : 'Registration failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // ========================================\n  // PASSWORD STRENGTH INDICATOR\n  // ========================================\n  const getPasswordStrengthColor = (strength: number): string => {\n    switch (strength) {\n      case 0: case 1: return 'bg-red-500';\n      case 2: return 'bg-orange-500';\n      case 3: return 'bg-yellow-500';\n      case 4: case 5: return 'bg-green-500';\n      default: return 'bg-gray-300';\n    }\n  };\n\n  const getPasswordStrengthText = (strength: number): string => {\n    switch (strength) {\n      case 0: case 1: return 'Very Weak';\n      case 2: return 'Weak';\n      case 3: return 'Good';\n      case 4: case 5: return 'Strong';\n      default: return '';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-makrx-blue via-makrx-blue/95 to-makrx-blue/90 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900 flex items-center justify-center p-6\">\n      {/* Theme Toggle */}\n      <div className=\"fixed top-6 right-6 z-50\">\n        <MakrXThemeToggle variant=\"default\" />\n      </div>\n      \n      {/* Background Pattern */}\n      <div className=\"absolute inset-0 opacity-20\">\n        <div className=\"absolute top-20 left-20 w-32 h-32 border border-white/20 rounded-lg rotate-12\"></div>\n        <div className=\"absolute bottom-20 right-20 w-24 h-24 border border-makrx-teal/30 rounded-full\"></div>\n        <div className=\"absolute top-1/2 left-10 w-16 h-16 border border-white/10 rounded-lg -rotate-12\"></div>\n      </div>\n      \n      <div className=\"w-full max-w-md relative\">\n        {/* Registration Card */}\n        <div className=\"backdrop-blur-md border border-white/20 rounded-2xl p-8 bg-white/10\">\n          {/* Header */}\n          <div className=\"text-center mb-8\">\n            <div className=\"flex justify-center mb-4\">\n              {/* CUSTOMIZATION: Change the logo icon and colors here */}\n              <div className=\"w-16 h-16 bg-makrx-teal rounded-2xl flex items-center justify-center\">\n                <Building2 className=\"w-8 h-8 text-white\" />\n              </div>\n            </div>\n            <h1 className=\"text-2xl font-bold text-white mb-2\">\n              {/* CUSTOMIZATION: Change the application name here */}\n              Join <span className=\"text-makrx-teal\">MakrCave</span>\n            </h1>\n            <p className=\"text-white/80\">Create your makerspace account</p>\n          </div>\n\n          {/* Registration Form */}\n          <form onSubmit={handleRegister} className=\"space-y-4\">\n            {/* Email Field */}\n            <div>\n              <label htmlFor=\"email\" className=\"block text-white text-sm font-medium mb-2\">\n                Email Address *\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-white/60\" />\n                <input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => handleInputChange('email', e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-makrx-teal focus:border-transparent\"\n                  placeholder=\"Enter your email\"\n                  required\n                />\n              </div>\n            </div>\n\n            {/* Username Field */}\n            <div>\n              <label htmlFor=\"username\" className=\"block text-white text-sm font-medium mb-2\">\n                Username *\n              </label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-white/60\" />\n                <input\n                  id=\"username\"\n                  type=\"text\"\n                  value={formData.username}\n                  onChange={(e) => handleInputChange('username', e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-makrx-teal focus:border-transparent\"\n                  placeholder=\"Choose a username\"\n                  required\n                />\n              </div>\n            </div>\n\n            {/* Name Fields - Side by Side */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label htmlFor=\"firstName\" className=\"block text-white text-sm font-medium mb-2\">\n                  First Name\n                </label>\n                <input\n                  id=\"firstName\"\n                  type=\"text\"\n                  value={formData.firstName}\n                  onChange={(e) => handleInputChange('firstName', e.target.value)}\n                  className=\"w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-makrx-teal focus:border-transparent\"\n                  placeholder=\"First name\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"lastName\" className=\"block text-white text-sm font-medium mb-2\">\n                  Last Name\n                </label>\n                <input\n                  id=\"lastName\"\n                  type=\"text\"\n                  value={formData.lastName}\n                  onChange={(e) => handleInputChange('lastName', e.target.value)}\n                  className=\"w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-makrx-teal focus:border-transparent\"\n                  placeholder=\"Last name\"\n                />\n              </div>\n            </div>\n\n            {/* Password Field */}\n            <div>\n              <label htmlFor=\"password\" className=\"block text-white text-sm font-medium mb-2\">\n                Password *\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-white/60\" />\n                <input\n                  id=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  value={formData.password}\n                  onChange={(e) => handleInputChange('password', e.target.value)}\n                  className=\"w-full pl-10 pr-12 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-makrx-teal focus:border-transparent\"\n                  placeholder=\"Create a password\"\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-white/60 hover:text-white\"\n                >\n                  {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                </button>\n              </div>\n              \n              {/* Password Strength Indicator */}\n              {formData.password && (\n                <div className=\"mt-2\">\n                  <div className=\"flex space-x-1 mb-2\">\n                    {[1, 2, 3, 4, 5].map((level) => (\n                      <div\n                        key={level}\n                        className={`h-2 flex-1 rounded ${\n                          level <= passwordStrength\n                            ? getPasswordStrengthColor(passwordStrength)\n                            : 'bg-white/20'\n                        }`}\n                      />\n                    ))}\n                  </div>\n                  <p className=\"text-xs text-white/60\">\n                    Password strength: <span className={passwordStrength >= 3 ? 'text-green-300' : 'text-yellow-300'}>\n                      {getPasswordStrengthText(passwordStrength)}\n                    </span>\n                  </p>\n                </div>\n              )}\n            </div>\n\n            {/* Confirm Password Field */}\n            <div>\n              <label htmlFor=\"confirmPassword\" className=\"block text-white text-sm font-medium mb-2\">\n                Confirm Password *\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-white/60\" />\n                <input\n                  id=\"confirmPassword\"\n                  type={showConfirmPassword ? 'text' : 'password'}\n                  value={formData.confirmPassword}\n                  onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n                  className=\"w-full pl-10 pr-12 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-makrx-teal focus:border-transparent\"\n                  placeholder=\"Confirm your password\"\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-white/60 hover:text-white\"\n                >\n                  {showConfirmPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                </button>\n              </div>\n              \n              {/* Password Match Indicator */}\n              {formData.confirmPassword && (\n                <div className=\"mt-2 flex items-center gap-2\">\n                  {formData.password === formData.confirmPassword ? (\n                    <>\n                      <CheckCircle className=\"w-4 h-4 text-green-300\" />\n                      <span className=\"text-xs text-green-300\">Passwords match</span>\n                    </>\n                  ) : (\n                    <>\n                      <AlertCircle className=\"w-4 h-4 text-red-300\" />\n                      <span className=\"text-xs text-red-300\">Passwords do not match</span>\n                    </>\n                  )}\n                </div>\n              )}\n            </div>\n\n            {/* Error Message */}\n            {error && (\n              <div className=\"bg-red-500/10 border border-red-500/20 rounded-lg p-3\">\n                <p className=\"text-xs text-red-300\">{error}</p>\n              </div>\n            )}\n\n            {/* User Agreement */}\n            <div className=\"text-xs text-white/60 text-center\">\n              By creating an account, you agree to our Terms of Service and Privacy Policy.\n              You will be assigned the <span className=\"text-makrx-teal font-medium\">Maker</span> role initially.\n            </div>\n\n            {/* Submit Button */}\n            <button\n              type=\"submit\"\n              disabled={isLoading || passwordStrength < 3 || formData.password !== formData.confirmPassword}\n              className=\"w-full bg-makrx-teal text-white font-semibold py-3 rounded-lg hover:bg-makrx-teal-light transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n            >\n              {isLoading ? (\n                <>\n                  <div className=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                  Creating Account...\n                </>\n              ) : (\n                'Create Account'\n              )}\n            </button>\n          </form>\n\n          {/* Login Link */}\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-white/60 text-sm\">\n              Already have an account?{' '}\n              <Link to=\"/login\" className=\"text-makrx-teal hover:text-makrx-teal-light font-medium\">\n                Sign In\n              </Link>\n            </p>\n          </div>\n\n          {/* Footer */}\n          <div className=\"mt-8 text-center\">\n            <div className=\"pt-4 border-t border-white/10\">\n              <p className=\"text-xs text-white/40\">\n                🔐 Secure Registration • Powered by MakrCave\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Back to Gateway */}\n        <div className=\"text-center mt-6\">\n          <a \n            href=\"https://e986654b5a5843d7b3f8adf13b61022c-556d114307be4dee892ae999b.projects.builder.codes\"\n            className=\"text-white/80 hover:text-white text-sm flex items-center justify-center gap-2\"\n          >\n            ← Back to MakrX Gateway\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n
