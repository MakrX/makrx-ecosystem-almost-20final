// ========================================\n// FORGOT PASSWORD PAGE\n// ========================================\n// Password reset interface for MakrCave\n// Features:\n// - Email-based password reset request\n// - Password reset confirmation with token\n// - Success/error state handling\n// - Responsive design matching other auth pages\n\nimport { useState } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Building2, Mail, Lock, ArrowLeft, CheckCircle, AlertCircle } from 'lucide-react';\nimport MakrXThemeToggle from '../components/MakrXThemeToggle';\nimport authService from '../services/authService';\n\nexport default function ForgotPassword() {\n  // ========================================\n  // STATE MANAGEMENT\n  // ========================================\n  const [searchParams] = useSearchParams();\n  const resetToken = searchParams.get('token'); // Token from email link\n  const [email, setEmail] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [step, setStep] = useState<'request' | 'reset' | 'complete'>(\n    resetToken ? 'reset' : 'request'\n  );\n\n  // ========================================\n  // PASSWORD RESET REQUEST\n  // ========================================\n  // Sends password reset email to user\n  const handleResetRequest = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n    setSuccess('');\n\n    try {\n      // Request password reset email\n      const result = await authService.requestPasswordReset({ email });\n      setSuccess(result.message || 'Password reset email sent! Check your inbox.');\n      setStep('complete');\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Failed to send reset email');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // ========================================\n  // PASSWORD RESET CONFIRMATION\n  // ========================================\n  // Resets password using token from email\n  const handlePasswordReset = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate password match\n    if (newPassword !== confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n\n    // Validate password strength\n    if (newPassword.length < 8) {\n      setError('Password must be at least 8 characters long');\n      return;\n    }\n\n    setIsLoading(true);\n    setError('');\n    setSuccess('');\n\n    try {\n      // Reset password with token\n      const result = await authService.resetPassword(resetToken!, newPassword);\n      setSuccess(result.message || 'Password reset successfully!');\n      setStep('complete');\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Failed to reset password');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // ========================================\n  // RENDER REQUEST FORM\n  // ========================================\n  const renderRequestForm = () => (\n    <>\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <div className=\"flex justify-center mb-4\">\n          {/* CUSTOMIZATION: Change the logo icon and colors here */}\n          <div className=\"w-16 h-16 bg-makrx-teal rounded-2xl flex items-center justify-center\">\n            <Building2 className=\"w-8 h-8 text-white\" />\n          </div>\n        </div>\n        <h1 className=\"text-2xl font-bold text-white mb-2\">\n          Reset Password\n        </h1>\n        <p className=\"text-white/80\">Enter your email to receive reset instructions</p>\n      </div>\n\n      {/* Reset Request Form */}\n      <form onSubmit={handleResetRequest} className=\"space-y-6\">\n        {/* Email Field */}\n        <div>\n          <label htmlFor=\"email\" className=\"block text-white text-sm font-medium mb-2\">\n            Email Address\n          </label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-white/60\" />\n            <input\n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => {\n                setEmail(e.target.value);\n                if (error) setError('');\n              }}\n              className=\"w-full pl-10 pr-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-makrx-teal focus:border-transparent\"\n              placeholder=\"Enter your email address\"\n              required\n            />\n          </div>\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"bg-red-500/10 border border-red-500/20 rounded-lg p-3\">\n            <div className=\"flex items-center gap-2\">\n              <AlertCircle className=\"w-4 h-4 text-red-300\" />\n              <p className=\"text-xs text-red-300\">{error}</p>\n            </div>\n          </div>\n        )}\n\n        {/* Submit Button */}\n        <button\n          type=\"submit\"\n          disabled={isLoading}\n          className=\"w-full bg-makrx-teal text-white font-semibold py-3 rounded-lg hover:bg-makrx-teal-light transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n        >\n          {isLoading ? (\n            <>\n              <div className=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n              Sending Email...\n            </>\n          ) : (\n            'Send Reset Email'\n          )}\n        </button>\n      </form>\n    </>\n  );\n\n  // ========================================\n  // RENDER RESET FORM\n  // ========================================\n  const renderResetForm = () => (\n    <>\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"w-16 h-16 bg-makrx-teal rounded-2xl flex items-center justify-center\">\n            <Lock className=\"w-8 h-8 text-white\" />\n          </div>\n        </div>\n        <h1 className=\"text-2xl font-bold text-white mb-2\">\n          Create New Password\n        </h1>\n        <p className=\"text-white/80\">Enter your new password below</p>\n      </div>\n\n      {/* Password Reset Form */}\n      <form onSubmit={handlePasswordReset} className=\"space-y-6\">\n        {/* New Password Field */}\n        <div>\n          <label htmlFor=\"newPassword\" className=\"block text-white text-sm font-medium mb-2\">\n            New Password\n          </label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-white/60\" />\n            <input\n              id=\"newPassword\"\n              type=\"password\"\n              value={newPassword}\n              onChange={(e) => {\n                setNewPassword(e.target.value);\n                if (error) setError('');\n              }}\n              className=\"w-full pl-10 pr-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-makrx-teal focus:border-transparent\"\n              placeholder=\"Enter new password\"\n              required\n              minLength={8}\n            />\n          </div>\n        </div>\n\n        {/* Confirm Password Field */}\n        <div>\n          <label htmlFor=\"confirmPassword\" className=\"block text-white text-sm font-medium mb-2\">\n            Confirm New Password\n          </label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-white/60\" />\n            <input\n              id=\"confirmPassword\"\n              type=\"password\"\n              value={confirmPassword}\n              onChange={(e) => {\n                setConfirmPassword(e.target.value);\n                if (error) setError('');\n              }}\n              className=\"w-full pl-10 pr-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-makrx-teal focus:border-transparent\"\n              placeholder=\"Confirm new password\"\n              required\n              minLength={8}\n            />\n          </div>\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"bg-red-500/10 border border-red-500/20 rounded-lg p-3\">\n            <div className=\"flex items-center gap-2\">\n              <AlertCircle className=\"w-4 h-4 text-red-300\" />\n              <p className=\"text-xs text-red-300\">{error}</p>\n            </div>\n          </div>\n        )}\n\n        {/* Submit Button */}\n        <button\n          type=\"submit\"\n          disabled={isLoading}\n          className=\"w-full bg-makrx-teal text-white font-semibold py-3 rounded-lg hover:bg-makrx-teal-light transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n        >\n          {isLoading ? (\n            <>\n              <div className=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n              Resetting Password...\n            </>\n          ) : (\n            'Reset Password'\n          )}\n        </button>\n      </form>\n    </>\n  );\n\n  // ========================================\n  // RENDER SUCCESS STATE\n  // ========================================\n  const renderSuccessState = () => (\n    <>\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"w-16 h-16 bg-green-500 rounded-2xl flex items-center justify-center\">\n            <CheckCircle className=\"w-8 h-8 text-white\" />\n          </div>\n        </div>\n        <h1 className=\"text-2xl font-bold text-white mb-2\">\n          {step === 'complete' && resetToken ? 'Password Reset Complete' : 'Check Your Email'}\n        </h1>\n        <p className=\"text-white/80\">\n          {step === 'complete' && resetToken \n            ? 'Your password has been successfully reset'\n            : 'We\\'ve sent password reset instructions to your email'\n          }\n        </p>\n      </div>\n\n      {/* Success Message */}\n      <div className=\"bg-green-500/10 border border-green-500/20 rounded-lg p-4 mb-6\">\n        <div className=\"flex items-center gap-2\">\n          <CheckCircle className=\"w-5 h-5 text-green-300\" />\n          <p className=\"text-sm text-green-300\">{success}</p>\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"space-y-4\">\n        {step === 'complete' && resetToken ? (\n          <Link\n            to=\"/login\"\n            className=\"w-full bg-makrx-teal text-white font-semibold py-3 rounded-lg hover:bg-makrx-teal-light transition-colors flex items-center justify-center gap-2\"\n          >\n            Continue to Login\n          </Link>\n        ) : (\n          <div className=\"text-center text-white/60 text-sm\">\n            <p>Didn't receive the email? Check your spam folder or try again.</p>\n            <button\n              onClick={() => {\n                setStep('request');\n                setSuccess('');\n                setError('');\n              }}\n              className=\"text-makrx-teal hover:text-makrx-teal-light font-medium mt-2\"\n            >\n              Try Again\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-makrx-blue via-makrx-blue/95 to-makrx-blue/90 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900 flex items-center justify-center p-6\">\n      {/* Theme Toggle */}\n      <div className=\"fixed top-6 right-6 z-50\">\n        <MakrXThemeToggle variant=\"default\" />\n      </div>\n      \n      {/* Background Pattern */}\n      <div className=\"absolute inset-0 opacity-20\">\n        <div className=\"absolute top-20 left-20 w-32 h-32 border border-white/20 rounded-lg rotate-12\"></div>\n        <div className=\"absolute bottom-20 right-20 w-24 h-24 border border-makrx-teal/30 rounded-full\"></div>\n        <div className=\"absolute top-1/2 left-10 w-16 h-16 border border-white/10 rounded-lg -rotate-12\"></div>\n      </div>\n      \n      <div className=\"w-full max-w-md relative\">\n        {/* Reset Card */}\n        <div className=\"backdrop-blur-md border border-white/20 rounded-2xl p-8 bg-white/10\">\n          {/* Dynamic Content Based on Step */}\n          {step === 'request' && renderRequestForm()}\n          {step === 'reset' && renderResetForm()}\n          {step === 'complete' && renderSuccessState()}\n\n          {/* Back to Login Link */}\n          {step !== 'complete' && (\n            <div className=\"mt-6 text-center\">\n              <Link \n                to=\"/login\" \n                className=\"text-white/60 hover:text-white text-sm flex items-center justify-center gap-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                Back to Login\n              </Link>\n            </div>\n          )}\n\n          {/* Footer */}\n          <div className=\"mt-8 text-center\">\n            <div className=\"pt-4 border-t border-white/10\">\n              <p className=\"text-xs text-white/40\">\n                🔐 Secure Password Reset • Powered by MakrCave\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Back to Gateway */}\n        <div className=\"text-center mt-6\">\n          <a \n            href=\"https://e986654b5a5843d7b3f8adf13b61022c-556d114307be4dee892ae999b.projects.builder.codes\"\n            className=\"text-white/80 hover:text-white text-sm flex items-center justify-center gap-2\"\n          >\n            ← Back to MakrX Gateway\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n
