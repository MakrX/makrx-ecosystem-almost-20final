# MakrX Event Service Environment Configuration
# Copy this file to .env and update with your actual values

# Environment
ENVIRONMENT=production
# Options: development, staging, production

# Service URLs (REQUIRED)
MAKRCAVE_API_URL=https://api.makrcave.com
STORE_API_URL=https://api.makrx.store
AUTH_SERVICE_URL=https://auth.makrx.org

# Authentication (REQUIRED)
KEYCLOAK_URL=https://auth.makrx.org
KEYCLOAK_REALM=makrx
KEYCLOAK_CLIENT_ID=event-service
JWT_SECRET=CHANGE_ME_SECURE_JWT_SECRET_KEY_256_BITS_MIN
# Generate with: openssl rand -base64 32

# Security Settings
SECRET_KEY=CHANGE_ME_SECURE_SECRET_KEY
API_KEY=CHANGE_ME_EVENT_SERVICE_API_KEY
CORS_ORIGINS=https://makrx.org,https://makrcave.com,https://makrx.store
ALLOWED_HOSTS=events.makrx.org,localhost

# Redis Configuration (for event queuing)
REDIS_URL=redis://localhost:6379/2
REDIS_PASSWORD=CHANGE_ME_REDIS_PASSWORD

# Database (for event persistence)
DATABASE_URL=postgresql://events_user:CHANGE_ME_DB_PASSWORD@localhost:5432/makrx_events

# WebSocket Configuration
WEBSOCKET_ORIGINS=wss://makrx.org,wss://makrcave.com,wss://makrx.store
MAX_CONNECTIONS=1000
CONNECTION_TIMEOUT=300
# Connection timeout in seconds (5 minutes)

# Event Configuration
MAX_QUEUE_SIZE=10000
EVENT_RETENTION_HOURS=168
# Keep events for 7 days (168 hours)
MAX_RETRY_ATTEMPTS=3
RETRY_DELAY_SECONDS=5

# Rate Limiting (events per hour)
RATE_LIMIT_PUBLISH=1000
RATE_LIMIT_SUBSCRIBE=100
RATE_LIMIT_WEBHOOK=500

# Webhook Configuration
WEBHOOK_TIMEOUT=30
# Webhook timeout in seconds
WEBHOOK_RETRY_ATTEMPTS=3
WEBHOOK_VERIFY_SSL=true

# Logging and Monitoring
LOG_LEVEL=INFO
LOG_FILE=/var/log/makrx/events.log
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# Health and Metrics
HEALTH_CHECK_TOKEN=CHANGE_ME_HEALTH_CHECK_SECRET
METRICS_ENABLED=true
METRICS_PORT=9090

# SSL/TLS
SSL_KEYFILE=/etc/ssl/private/events.key
SSL_CERTFILE=/etc/ssl/certs/events.crt

# Development Settings (development only)
DEBUG=false
ENABLE_CORS_ALL=false
# Only set to true in development

# IMPORTANT SECURITY NOTES:
# 1. Use strong API keys and secrets
# 2. Enable SSL/TLS for WebSocket connections
# 3. Validate all webhook URLs
# 4. Monitor event queue sizes
# 5. Set up proper firewall rules
# 6. Regularly rotate secrets
# 7. Enable authentication for WebSocket connections
# 8. Monitor for unusual event patterns
# 9. Set up alerting for service failures
# 10. Use environment-specific configurations
